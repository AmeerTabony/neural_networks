

FOLDS = 10;
%% get wine data
shuffledWines = getShuffledWines();
%%
avgSR = 0;
tic

avgTE = 0;
for fold=1:10
    
    [train,test] = splitData(shuffledWines,FOLDS,fold);
    train(:,2:end) = normr(train(:,2:end)); 
    test(:,2:end) = normr(test(:,2:end));
    
    trainingData = train(:,2:end);
    testingData = test(:,2:end);
    
    ouputSize = 2;
    trainOutput = formatOutput(train(:,1),ouputSize);
    testOutput = formatOutput(test(:,1),ouputSize);

    layerSizes = [12,7,ouputSize];
    trainingOpts.learningRate = 0.9;
    trainingOpts.numOfEpochs = 80;
    trainingOpts.learningDecreaseRate = 0.9;
    trainingOpts.learningDropRate = 8;

    network = trainNetwork( trainingData, trainOutput, layerSizes, trainingOpts );
    toc

    
    [sr,trainingError] = testNetwork(network, testingData, testOutput) ;

    logstr = strcat('Fold num: ',num2str(fold),' success rate: ',num2str(sr),'%%');
    sprintf(logstr)

    avgSR = [avgSR ,sr];
    avgTE = avgTE + trainingError;
end
logstr = strcat('END of all validations. average success rate: ',num2str(mean(avgSR)),'%%');
logstr = strcat(logstr,'\nstd:', num2str(std(avgSR)),'\naverage training error: ' ,num2str(avgTE/FOLDS));
sprintf(logstr)
                   

